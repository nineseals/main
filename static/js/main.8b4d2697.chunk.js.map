{"version":3,"sources":["assets/img/preloader-effect.mp4","assets/img/nine_seals_1.png","assets/img/nine_seals_2.png","assets/img/nine_seals_3.png","assets/img/nine_seals_4.png","assets/img/nine_seals_5.png","assets/img/nine_seals_6.png","assets/img/nine_seals_7.png","assets/img/nine_seals_8.png","assets/img/nine_seals_9.png","assets/img/pfp_ikari.png","assets/img/pfp_itsbradleybitch.png","assets/img/pfp_artist.png","components/Background/Background.js","components/Header/Header.js","components/CollectionPreviews/CollectionPreviews.js","components/TeamMember/TeamMember.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Background","props","id","className","style","opacity","autoPlay","loop","muted","src","bgVideo","type","Header","href","wallet","join","slice","toUpperCase","onClick","connectWalletHandler","previewImages","preview1","preview2","preview3","preview4","preview5","preview6","preview7","preview8","preview9","CollectionPreviews","slides","map","item","key","alt","effect","grabCursor","centeredSlides","slidesPerView","initialSlide","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","modules","EffectCoverflow","TeamMember","imageUrl","loading","srcSet","title","twitter","target","rel","description","SALE_STATUS_NOT_STARTED","SALE_STATUS_ALLOWLIST","SALE_STATUS_PUBLIC","SALE_STATUS_DONE","SALE_STATUS_PAUSED","PUBLIC_SALE_KEY","App","mintNumRef","useRef","useState","web3","setWeb3","currentAccount","setCurrentAccount","contract","setContract","saleStatus","setSaleStatus","salePrice","setSalePrice","userConfig","setUserConfig","errorMessage","setErrorMessage","txHash","setTxHash","collectionSize","setCollectionSize","numMinted","setNumMinted","useEffect","init","ethereum","window","checkWalletIsConnected","on","accounts","initAccount","networkId","initContract","checkStatusInterval","setInterval","checkSaleStatus","updateMintCounts","getUserConfig","clearInterval","getSalePrice","async","connWeb3","Web3","givenProvider","eth","getAccounts","length","account","console","log","ethNetworkId","net","getId","oContract","networks","clearErrorMessage","contractAddress","address","abi","nftContract","Contract","methods","call","currStatus","getSaleStatus","Number","currMintCount","totalSupply","mintCost","getMintPrice","_userConfig","mintNftHandler","mintQty","current","value","mintTotalCost","utils","BN","muln","fromWei","nftTxn","allowlistMint","send","from","toString","publicSaleMint","transactionHash","err","mintNftForm","maxMints","userAllowlistRemaining","userPublicRemaining","ref","step","min","max","defaultValue","disabled","saleNotStartedState","mintPausedState","salePctMinted","saleClosedState","allowlistState","userAllowlistSlots","publicSaleState","request","method","printSaleState","pfpFounder","pfpDev","pfpArtist","_address","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b4d2697.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader-effect.f3af0cd0.mp4\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_1.cfd485a8.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_2.8beb71c6.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_3.b66560b2.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_4.85c6200c.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_5.14e02e67.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_6.e497661a.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_7.26e537ac.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_8.546aa2bd.png\";","module.exports = __webpack_public_path__ + \"static/media/nine_seals_9.dbc96a31.png\";","module.exports = __webpack_public_path__ + \"static/media/pfp_ikari.e14ff18f.png\";","module.exports = __webpack_public_path__ + \"static/media/pfp_itsbradleybitch.4cab6a0a.png\";","module.exports = __webpack_public_path__ + \"static/media/pfp_artist.25de1e0f.png\";","import React from 'react';\nimport { BrowserView } from 'react-device-detect';\n\nimport bgVideo from '../../assets/img/preloader-effect.mp4';\nimport './Background.scss';\n\nconst Background = (props) => {\n    return (      \n      <div id=\"qodef-page-spinner\" className=\"qodef-m qodef-layout--plamen\" style={{opacity: 1}}>\n        <div className=\"qodef-m-inner\">\n          <div className=\"qodef-m-spinner\">\n            <div className=\"qodef-m-plamen\">\n              <BrowserView className=\"qodef-m-plamen-smoke\">\n                <video className='videoTag' autoPlay loop muted>\n                    <source src={bgVideo} type='video/mp4' />\n                </video>\n              </BrowserView>\n            </div> \n          </div>\n        </div>\n      </div>      \n    );\n}\n\nexport default Background;","import React from 'react';\nimport { SiDiscord, SiTwitter } from \"react-icons/si\";\n\n// import logo from \"../../assets/img/demonic_9_logo.jpg\";\nimport './Header.scss';\n\n\nconst Header = (props) => {\n\n    return (\n      <div className=\"header-container\">\n        <div className=\"header-left\">\n            {/* <div className=\"logo-container\">\n                <img src={logo} alt=\"NineSeals Logo\" className=\"logo\" /> \n            </div> */}\n        </div>\n        <div className=\"header-right\">\n            <div className=\"link\">                \n                <a href=\"https://twitter.com/ninesealsnft\"><SiTwitter className=\"social-icon\" /></a>\n            </div>\n            <div className=\"link\">\n                <a href=\"https://discord.gg/KwGSBzAC\"><SiDiscord className=\"social-icon\" /></a>\n            </div>\n            <div>\n                {\n                    props.wallet \n                    ? (\n                        <button \n                            className={[\n                                `wallet-connect-button`,\n                                (props.wallet && `connected`)\n                            ].join(' ')}>\n                            {props.wallet.slice(0,4).toUpperCase()}...{props.wallet.slice(-4).toUpperCase()}\n                        </button>\n                      )\n                    : <button onClick={props.connectWalletHandler} className=\"wallet-connect-button\">Connect</button>\n                }               \n            </div>\n        </div>        \n      </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\n// Import Swiper styles\nimport \"swiper/swiper.scss\";\n\n// import required modules\nimport { EffectCoverflow } from \"swiper\";\n\nimport './CollectionPreviews.scss';\n\n\nimport preview1 from '../../assets/img/nine_seals_1.png';\nimport preview2 from '../../assets/img/nine_seals_2.png';\nimport preview3 from '../../assets/img/nine_seals_3.png';\nimport preview4 from '../../assets/img/nine_seals_4.png';\nimport preview5 from '../../assets/img/nine_seals_5.png';\nimport preview6 from '../../assets/img/nine_seals_6.png';\nimport preview7 from '../../assets/img/nine_seals_7.png';\nimport preview8 from '../../assets/img/nine_seals_8.png';\nimport preview9 from '../../assets/img/nine_seals_9.png';\n\nconst previewImages = [\n  preview1,\n  preview2,\n  preview3,\n  preview4,\n  preview5,\n  preview6,\n  preview7,\n  preview8,\n  preview9\n];\n\nconst CollectionPreviews = (props) => {\n\n    const slides = previewImages.map((item, key) => (\n      <SwiperSlide key={key}>\n        <img src={item} alt={`Preview ${key}`} />\n      </SwiperSlide>\n    ));\n\n    return (\n        <div>\n          <Swiper\n            effect={\"coverflow\"}\n            grabCursor={true}\n            centeredSlides={true}\n            slidesPerView={\"auto\"}\n            initialSlide={4}\n            coverflowEffect={{\n              rotate: 20,\n              stretch: 0,\n              depth: 100,\n              modifier: 1,\n              slideShadows: true,\n            }}\n            modules={[EffectCoverflow]}\n            className=\"mySwiper\"\n          >\n            {slides}\n          </Swiper>\n        </div>\n      );\n}\n\nexport default CollectionPreviews;","import React from 'react';\nimport { SiTwitter } from \"react-icons/si\";\n\nimport './TeamMember.scss';\n\nconst TeamMember = (props) => {\n\n    return (\n      <div className=\"team-member-item\">\n        <div className=\"team-member-image active\">\n          <img \n            src={ props.imageUrl } \n            loading=\"lazy\" \n            srcSet={ props.imageUrl }\n            alt={ props.title } /> \n        </div>\n\n        <h2 className=\"title\">{ props.title }</h2>\n        <div className=\"twitter\"><a href={`https://twitter.com/${props.twitter}`} target=\"_blank\" rel=\"noopener noreferrer\"><SiTwitter className=\"social-icon\" /> @{ props.twitter }</a></div>\n        <p className=\"description\">{ props.description }</p>\n      </div>\n    );\n}\n\nexport default TeamMember;","import React, { useEffect, useRef, useState } from \"react\";\nimport Web3 from 'web3';\nimport { TbExternalLink } from \"react-icons/tb\";\n\nimport Background from \"./components/Background/Background\";\nimport Header from './components/Header/Header';\nimport CollectionPreviews from './components/CollectionPreviews/CollectionPreviews';\nimport TeamMember from \"./components/TeamMember/TeamMember\";\n\nimport oContract from './contracts/NineSeals.json';\n\nimport './App.scss';\n\nimport pfpFounder from './assets/img/pfp_ikari.png';\nimport pfpDev from './assets/img/pfp_itsbradleybitch.png';\nimport pfpArtist from './assets/img/pfp_artist.png';\n\nconst SALE_STATUS_NOT_STARTED = 0;\nconst SALE_STATUS_ALLOWLIST = 1;\nconst SALE_STATUS_PUBLIC = 2;\nconst SALE_STATUS_DONE = 3;\nconst SALE_STATUS_PAUSED = 4;\n\nconst PUBLIC_SALE_KEY = 15670169;\n\nfunction App() {\n\n  const mintNumRef = useRef(null);\n\n  const [web3, setWeb3] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [saleStatus, setSaleStatus] = useState(null);\n  const [salePrice, setSalePrice] = useState(null);\n  const [userConfig, setUserConfig] = useState({});\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [txHash, setTxHash] = useState(null);\n  const [collectionSize, setCollectionSize] = useState(null);\n  const [numMinted, setNumMinted] = useState(null);\n  \n  useEffect(() => {\n    init();    \n  }, []);\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (web3) {\n      checkWalletIsConnected();    \n\n      if (ethereum) {\n        ethereum.on('accountsChanged', (accounts) => {\n          // Time to reload your interface with accounts[0]!\n          // console.log('Accounts Changed:', accounts);\n          initAccount();\n        });\n        \n        ethereum.on('chainChanged', (networkId) => {\n          // Time to reload your interface with the new networkId\n          // console.log('Network Changed:', networkId);\n          initContract();\n        });\n      }\n    }\n  }, \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [web3]);\n\n  useEffect(() => {\n    let checkStatusInterval = null;\n    \n    if (contract) {\n      checkStatusInterval = setInterval(() => {\n        checkSaleStatus();\n        updateMintCounts();\n      }, 2500);\n      \n      getUserConfig();\n    }\n\n    return () => clearInterval(checkStatusInterval);\n  }, \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [contract]);\n\n  useEffect(() => {\n    if (saleStatus > 0) {\n      // console.log(\"Status:\", saleStatus);\n      getSalePrice();\n    }\n  }, \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [saleStatus]);\n\n  // // DEBUG ONLY\n  // useEffect(() => {\n  //   console.log(\"userConfig:\", userConfig);\n  // }, [userConfig]);\n\n  // // DEBUG ONLY\n  // useEffect(() => {\n  //   console.log(\"salePrice:\", salePrice);\n  // }, [salePrice]);\n\n  const init = async () => {\n    // Get network provider and web3 instance.\n    const connWeb3 = await new Web3(Web3.givenProvider || 'http://localhost:8545');\n    setWeb3(connWeb3);\n  };\n\n  const initAccount = async () => {\n    // Use web3 to get the user's accounts.\n    const accounts = await web3.eth.getAccounts();\n\n    // console.log(accounts);\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      setCurrentAccount(null);\n      // console.log(\"No authorized account found\");\n    }\n  };\n\n  const initContract = async () => {\n    const ethNetworkId = await web3.eth.net.getId();\n    // console.log(\"Network: \", ethNetworkId);\n\n    if (!oContract.networks[ethNetworkId]) {\n      setErrorMessage(\"Please make sure you are connected to mainnet\");\n      return;\n    } else {\n      clearErrorMessage();\n    }\n\n    const contractAddress = oContract.networks[ethNetworkId].address;\n    const abi = oContract.abi;\n\n    // Create a contract instance\n    const nftContract = new web3.eth.Contract(abi, contractAddress);\n\n    // console.log(nftContract);\n\n    const collectionSize = await nftContract.methods.collectionSize().call();\n\n    setCollectionSize(collectionSize);\n\n    setContract(nftContract);\n  };\n\n  const clearErrorMessage = () => setErrorMessage(\"\");\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      setErrorMessage(\"No available web3 wallet detected\");\n      // console.log(\"Make sure you have Metamask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\")\n    \n      await initAccount();\n\n      await initContract();\n    }\n  }\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      setErrorMessage(\"Please install Metamask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err)\n    }\n\n    await initAccount();\n  }\n\n  const checkSaleStatus = async () => {\n    if (!contract) { \n      console.log('No contract available to get status');\n    } else {\n      const currStatus = await contract.methods.getSaleStatus().call();\n      setSaleStatus(Number(currStatus));\n    } \n  }\n\n  const updateMintCounts = async () => {\n    if (!contract) { \n      console.log('No contract available to get mint counts');\n    } else {\n      const currMintCount = await contract.methods.totalSupply().call();\n      setNumMinted(currMintCount);\n    } \n  }\n\n  const getSalePrice = async () => {\n    if (contract) {\n      const mintCost = await contract.methods.getMintPrice().call();\n      // console.log(`Fetched mint cost: ${mintCost}`);\n      setSalePrice(mintCost);\n    }\n  }\n\n  const getUserConfig = async () => {\n\n    if (!contract || !currentAccount) { \n      return false;\n    } \n\n    const _userConfig = await contract.methods.getUserConfig(currentAccount).call();\n\n    \n    // const allowlistSlots = Number(await contract.methods.allowlistSlots(currentAccount).call());\n    // const allowlistRemaining =  Number(await contract.methods.allowlistTokensRemaining(currentAccount).call());\n\n    // const publicSlots = Number(await contract.methods.maxMintableTokens(currentAccount).call());\n    // const publicRemaining =  Number(await contract.methods.publicSaleTokensRemaining(currentAccount).call());\n\n    // const tokenBalance = Number(await contract.methods.numberMinted(currentAccount).call());\n\n    setUserConfig({\n      ...userConfig,\n      ...(_userConfig || {})\n    });\n  }\n\n  \n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n\n        const mintQty = Number(mintNumRef.current.value);\n\n        if (!mintQty) {\n          return;\n        }\n\n        const mintTotalCost = new web3.utils.BN(salePrice).muln(mintQty);\n\n        console.log(`Minting ${mintQty} tokens for ${web3.utils.fromWei(mintTotalCost, 'ether')} ether.`);\n        \n        let nftTxn = null;\n\n        if (saleStatus === SALE_STATUS_ALLOWLIST) {\n          nftTxn = await contract.methods.allowlistMint(mintQty).send({ from: currentAccount, value: mintTotalCost.toString() }).on('receipt', function () {\n            // console.log('receipt')\n          });\n\n        } else {\n          nftTxn = await contract.methods.publicSaleMint(mintQty, PUBLIC_SALE_KEY).send({ from: currentAccount, value: mintTotalCost.toString() }).on('receipt', function () {\n            // console.log('receipt')\n          });\n        }\n\n        // console.log(\"Minting...please wait\");\n        console.log(\"Minted: \", nftTxn.transactionHash);\n\n        if (`transactionHash` in nftTxn) {\n          setTxHash(nftTxn.transactionHash);\n        }\n\n        await getUserConfig();\n\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  \n  const mintNftForm = () => {\n    const maxMints = (saleStatus === SALE_STATUS_ALLOWLIST) \n      ? userConfig.userAllowlistRemaining\n      : userConfig.userPublicRemaining;\n\n      if (mintNumRef.current && mintNumRef.current.value > maxMints) {\n        mintNumRef.current.value = maxMints;\n      }\n\n    return (\n      <div className=\"mint-form\">        \n        <div className=\"form-row\">\n          <input ref={mintNumRef} type=\"number\" step=\"1\" min=\"1\" max={maxMints} defaultValue={maxMints} className=\"input-mint-number\" disabled={!maxMints} />\n        </div>\n        <div className=\"form-row\">\n          <button onClick={mintNftHandler} className='cta-button mint-nft-button' disabled={!maxMints}> \n            Mint\n          </button>\n        </div>\n        {\n          txHash && \n            <div className=\"tx-receipt\"><a href={`https://etherscan.io/tx/${txHash}`} target=\"_blank\" rel=\"noopener noreferrer\">View Tx on Etherscan <TbExternalLink /></a></div>\n        }\n      </div>      \n    )\n  };\n\n  const printSaleState = () => {\n    const salePctMinted = saleStatus && <div className=\"mint-count\">{numMinted} / {collectionSize}</div>;\n\n    switch (saleStatus) {\n      case SALE_STATUS_NOT_STARTED:\n        return saleNotStartedState(salePctMinted);\n\n      case SALE_STATUS_ALLOWLIST:\n        return allowlistState(salePctMinted);\n\n      case SALE_STATUS_PUBLIC:\n        return publicSaleState(salePctMinted);\n\n      case SALE_STATUS_PAUSED:\n        return mintPausedState(salePctMinted);\n\n      case SALE_STATUS_DONE:\n        return saleClosedState();\n\n      default:\n        return <div className=\"mint-loading\">Loading...</div>;\n    }\n  }\n\n  const saleNotStartedState = () => {\n    return (\n      <div>\n        <h1>Mint has not yet begun, check back later</h1>\n      </div>\n    );\n  };\n\n  const mintPausedState = (salePctMinted) => {\n    return (\n      <div>\n        <h1>Mint Paused</h1>\n        {salePctMinted}\n      </div>\n    );\n  };\n\n  const saleClosedState = () => {\n    return (\n      <div>\n        <h1>Mint has finished</h1>\n      </div>\n    );\n  };\n\n  const allowlistState = (salePctMinted) => {\n    return (\n      <div>\n        <h1>Allowlist Pre-sale</h1>\n        {salePctMinted}\n        <p>\n        {\n          userConfig.userAllowlistSlots \n          ? `You have ${userConfig.userAllowlistRemaining} allowlist mints remaining.`\n          : `You are not on the allowlist`\n        }\n        </p>\n        { mintNftForm() }\n      </div>\n    );\n  };\n\n  const publicSaleState = (salePctMinted) => {\n    return (\n      <div>\n        <h1>Public Sale</h1>\n        {salePctMinted}\n        <div>You have {userConfig.userPublicRemaining} mints remaining.</div>\n        { mintNftForm() }\n      </div>\n    );\n  };\n\n  return (\n    <div className='App'>      \n      <main className=\"wrapper\">\n        <Header connectWalletHandler={connectWalletHandler} wallet={currentAccount} />\n        <div className='main-app'>\n            { errorMessage && <div className=\"error-message-container\"><div className=\"error-message\">{errorMessage}</div></div> }\n            <section className=\"content-container section-mint\">\n              <div className=\"content\">\n                <h2 className=\"section-title\">Mint</h2>\n                <div className=\"mint-container\">                  \n                  {currentAccount ? printSaleState() : <h2>Please connect wallet to mint</h2>}\n                </div>\n              </div>\n            </section>          \n            <section className=\"content-container section-previews\">\n              <div className=\"content\">\n                <CollectionPreviews />\n              </div>\n            </section>\n            <section className=\"content-container section-team\">\n              <div className=\"content\">\n                <h2 className=\"section-title\">Team</h2>\n                <div className=\"team\">\n                  <TeamMember imageUrl={pfpFounder} title=\"Founder\" twitter=\"itskfreeze\" />\n                  <TeamMember imageUrl={pfpDev} title=\"Developer\" twitter=\"badassbradash\" />\n                  <TeamMember imageUrl={pfpArtist} title=\"Creative Director\" twitter=\"woodrow_22\" />\n                </div>\n              </div>\n            </section>\n            <section className=\"content-container section-footer\">\n              { (contract && `_address` in contract) &&\n                (\n                  <div className=\"contract-address\">\n                    Contract Address: <a href={`https://etherscan.io/address/${contract._address}`} target=\"_blank\" rel=\"noopener noreferrer\">{contract._address}</a>\n                  </div>\n                )\n              }\n            </section>\n        </div>\n      </main>\n      <Background />\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}